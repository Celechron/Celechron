// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PeriodTypeDto: Int, Codable {
  case classes = 0
  case test = 1
  case user = 2
  case flow = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct PeriodDto: Codable {
  var uid: String
  var type: PeriodTypeDto
  var name: String? = nil
  var startTime: Int64
  var endTime: Int64
  var location: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PeriodDto? {
    let uid = __pigeon_list[0] as! String
    let type = PeriodTypeDto(rawValue: __pigeon_list[1] as! Int)!
    let name: String? = nilOrValue(__pigeon_list[2])
    let startTime = __pigeon_list[3] is Int64 ? __pigeon_list[3] as! Int64 : Int64(__pigeon_list[3] as! Int32)
    let endTime = __pigeon_list[4] is Int64 ? __pigeon_list[4] as! Int64 : Int64(__pigeon_list[4] as! Int32)
    let location: String? = nilOrValue(__pigeon_list[5])

    return PeriodDto(
      uid: uid,
      type: type,
      name: name,
      startTime: startTime,
      endTime: endTime,
      location: location
    )
  }
  func toList() -> [Any?] {
    return [
      uid,
      type.rawValue,
      name,
      startTime,
      endTime,
      location,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FlowMessage {
  var flowListDto: [PeriodDto?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> FlowMessage? {
    let flowListDto = __pigeon_list[0] as! [PeriodDto?]

    return FlowMessage(
      flowListDto: flowListDto
    )
  }
  func toList() -> [Any?] {
    return [
      flowListDto
    ]
  }
}

private class FlowMessengerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return FlowMessage.fromList(self.readValue() as! [Any?])
    case 129:
      return PeriodDto.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlowMessengerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FlowMessage {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PeriodDto {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlowMessengerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlowMessengerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlowMessengerCodecWriter(data: data)
  }
}

class FlowMessengerCodec: FlutterStandardMessageCodec {
  static let shared = FlowMessengerCodec(readerWriter: FlowMessengerCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlowMessenger {
  func transfer(data: FlowMessage, completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlowMessengerSetup {
  /// The codec used by FlowMessenger.
  static var codec: FlutterStandardMessageCodec { FlowMessengerCodec.shared }
  /// Sets up an instance of `FlowMessenger` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlowMessenger?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let transferChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.celechron.FlowMessenger.transfer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      transferChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! FlowMessage
        api.transfer(data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      transferChannel.setMessageHandler(nil)
    }
  }
}
